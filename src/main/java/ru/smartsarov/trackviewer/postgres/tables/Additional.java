/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.trackviewer.postgres.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.trackviewer.postgres.Indexes;
import ru.smartsarov.trackviewer.postgres.Keys;
import ru.smartsarov.trackviewer.postgres.Public;
import ru.smartsarov.trackviewer.postgres.tables.records.AdditionalRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Additional extends TableImpl<AdditionalRecord> {

    private static final long serialVersionUID = 729815169;

    /**
     * The reference instance of <code>public.additional</code>
     */
    public static final Additional ADDITIONAL = new Additional();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdditionalRecord> getRecordType() {
        return AdditionalRecord.class;
    }

    /**
     * The column <code>public.additional.id</code>.
     */
    public final TableField<AdditionalRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('additional_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.additional.uid</code>.
     */
    public final TableField<AdditionalRecord, String> UID = createField("uid", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.additional.type</code>.
     */
    public final TableField<AdditionalRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.additional.owner</code>.
     */
    public final TableField<AdditionalRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.additional.model</code>.
     */
    public final TableField<AdditionalRecord, String> MODEL = createField("model", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.additional.description</code>.
     */
    public final TableField<AdditionalRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.additional</code> table reference
     */
    public Additional() {
        this(DSL.name("additional"), null);
    }

    /**
     * Create an aliased <code>public.additional</code> table reference
     */
    public Additional(String alias) {
        this(DSL.name(alias), ADDITIONAL);
    }

    /**
     * Create an aliased <code>public.additional</code> table reference
     */
    public Additional(Name alias) {
        this(alias, ADDITIONAL);
    }

    private Additional(Name alias, Table<AdditionalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Additional(Name alias, Table<AdditionalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Additional(Table<O> child, ForeignKey<O, AdditionalRecord> key) {
        super(child, key, ADDITIONAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADDITIONAL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AdditionalRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ADDITIONAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdditionalRecord> getPrimaryKey() {
        return Keys.ADDITIONAL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdditionalRecord>> getKeys() {
        return Arrays.<UniqueKey<AdditionalRecord>>asList(Keys.ADDITIONAL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Additional as(String alias) {
        return new Additional(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Additional as(Name alias) {
        return new Additional(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Additional rename(String name) {
        return new Additional(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Additional rename(Name name) {
        return new Additional(name, null);
    }
}
